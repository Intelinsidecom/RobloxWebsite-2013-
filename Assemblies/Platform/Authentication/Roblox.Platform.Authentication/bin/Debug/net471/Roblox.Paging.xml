<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roblox.Paging</name>
    </assembly>
    <members>
        <member name="T:Roblox.Paging.Extensions.EnumerableExtensions">
            <summary>
            Paging extensions for IEnumerables
            </summary>
        </member>
        <member name="M:Roblox.Paging.Extensions.EnumerableExtensions.PageBySkipTake``1(System.Collections.Generic.ICollection{``0},System.Int32,System.Int32)">
            <summary>
            Produces a Keyed Page Result from a collection of items by skipping and taking.
            </summary>
        </member>
        <member name="M:Roblox.Paging.Extensions.EnumerableExtensions.PageBySkipTake``1(System.Collections.Generic.IEnumerable{``0},System.Int32,System.Int32)">
            <summary>
            Produces a Keyed Page Result from a enumerable of items by skipping and taking.
            </summary>
        </member>
        <member name="M:Roblox.Paging.Extensions.Extensions.ToLongKey(Roblox.Paging.PageKeyInfo{System.Int32})">
            <summary>
            Converts the PageKey type from the original numeric type to long
            </summary>
        </member>
        <member name="M:Roblox.Paging.Extensions.Extensions.ToLongKey``1(Roblox.Paging.IKeyedPagedResult{``0,System.Int32})">
            <summary>
            Converts the PageKey type from the original numeric type to long
            </summary>
        </member>
        <member name="T:Roblox.Paging.IKeyedPagedResult`2">
            <summary>
            A generic interface representing a KeyedPagedResult that provides a key to find the next page,
            abstracting out how paging is implemented under the hood.
            </summary>
            <typeparam name="TPageItem">The type of item being returned in the page result.</typeparam>
            <typeparam name="TPageKey">The type of the page key.</typeparam>
        </member>
        <member name="P:Roblox.Paging.IKeyedPagedResult`2.PageItems">
            <summary>
            The items in the resulting page
            </summary>
        </member>
        <member name="P:Roblox.Paging.IKeyedPagedResult`2.NextPageKey">
            <summary>
            Returns the <see cref="T:Roblox.Paging.PageKeyInfo`1"/> for the next page
            </summary>
        </member>
        <member name="T:Roblox.Paging.CursorFactory">
            <inheritdoc cref="T:Roblox.Paging.ICursorFactory"/>
        </member>
        <member name="M:Roblox.Paging.CursorFactory.#ctor(System.Func{System.String})">
            <summary>
            Initializes a new <see cref="T:Roblox.Paging.CursorFactory"/>.
            </summary>
            <param name="cursorSaltGetter">The salt for the cursors.</param>
            <exception cref="T:System.ArgumentNullException">
            - <paramref name="cursorSaltGetter"/>
            </exception>
        </member>
        <member name="M:Roblox.Paging.CursorFactory.CreateCursor``1(``0)">
            <inheritdoc cref="M:Roblox.Paging.ICursorFactory.CreateCursor``1(``0)"/>
        </member>
        <member name="M:Roblox.Paging.CursorFactory.ParseCursor``1(System.String,System.String)">
            <inheritdoc cref="M:Roblox.Paging.ICursorFactory.ParseCursor``1(System.String,System.String)"/>
        </member>
        <member name="M:Roblox.Paging.CursorFactory.TryParseCursor``1(System.String,``0@,System.String)">
            <inheritdoc cref="M:Roblox.Paging.ICursorFactory.TryParseCursor``1(System.String,``0@,System.String)"/>
        </member>
        <member name="T:Roblox.Paging.CursorPagingDirection">
            <summary>
            Cursor pagination directions.
            </summary>
        </member>
        <member name="F:Roblox.Paging.CursorPagingDirection.Forward">
            <summary>
            Page forwards.
            </summary>
        </member>
        <member name="F:Roblox.Paging.CursorPagingDirection.Backward">
            <summary>
            Page backwards.
            </summary>
        </member>
        <member name="T:Roblox.Paging.ICursorFactory">
             <summary>
             A factory for building request cursors.
             </summary>
             <remarks>
             We want to use cursors for paging requests for a few reasons:
             - If we change the paging method the consumer will not have to update.
                 e.g. Going from start index paging -> exclusive start key paging the consumer only deals
                 with a cursor string representing a page in both cases. They know no start index, or exclusive start key.
            
             - Preserving caching.
                 By not allowing consumers to specify their own exclusive start key, start index, etc.
                 we can more easily cache collections (even if not now, in the future).
                 It enforces that, for example, paging could always be on a multiplication of 25 for start index paging.
                 Assuming the count is 25 for the first request and we don't let a user specify a start index
                 we will know there won't be any cached pages for start index 26 -> 49 that may not be accessed again.
             </remarks>
        </member>
        <member name="M:Roblox.Paging.ICursorFactory.CreateCursor``1(``0)">
            <summary>
            Creates a cursor string that represents paging information.
            </summary>
            <typeparam name="TCursorInformation">The class type holding cursor information.</typeparam>
            <param name="cursorInformation">The <typeparamref name="TCursorInformation"/>.</param>
            <returns>A cursor string to be exposed for requests.</returns>
            <exception cref="T:System.ArgumentNullException">
            - <paramref name="cursorInformation"/>
            </exception>
        </member>
        <member name="M:Roblox.Paging.ICursorFactory.ParseCursor``1(System.String,System.String)">
            <summary>
            Parses a <typeparamref name="TCursorInformation"/> from a cursor string.
            </summary>
            <typeparam name="TCursorInformation">The class type holding cursor information.</typeparam>
            <param name="cursor">The cursor string.</param>
            <param name="discriminator">The discriminator for verification (<see cref="P:Roblox.Paging.CursorBase.Discriminator"/>).</param>
            <returns>The <typeparamref name="TCursorInformation"/>.</returns>
            <exception cref="T:System.ArgumentException">
            - <paramref name="cursor"/> is invalid.
            </exception>
        </member>
        <member name="M:Roblox.Paging.ICursorFactory.TryParseCursor``1(System.String,``0@,System.String)">
            <summary>
            Tries to parse a <typeparamref name="TCursorInformation"/> from a cursor string.
            </summary>
            <typeparam name="TCursorInformation">The class type holding cursor information.</typeparam>
            <param name="cursor">The cursor string.</param>
            <param name="cursorInformation">The <typeparamref name="TCursorInformation"/>.</param>
            <param name="discriminator">The discriminator for verification (<see cref="P:Roblox.Paging.CursorBase.Discriminator"/>).</param>
            <returns><c>true</c> if the cursor was valid and parsed.</returns>
        </member>
        <member name="T:Roblox.Paging.IPagedResult`2">
            <summary>
            A interface that represents a page of results that supports count of items in the page.
            </summary>
            <typeparam name="TCount">The type of the result count in a page</typeparam>
            <typeparam name="TPageItem">The type of item being returned in the page result.</typeparam>
        </member>
        <member name="P:Roblox.Paging.IPagedResult`2.Count">
            <summary>
            Number of items in the resulting page
            </summary>
        </member>
        <member name="P:Roblox.Paging.IPagedResult`2.PageItems">
            <summary>
            The items in the resulting page
            </summary>
        </member>
        <member name="T:Roblox.Paging.IPagedResult`3">
            <summary>
            A interface that represents a page of results that supports count of items in the page, as well as count of total pages.
            </summary>
            <typeparam name="TCount">The type of the result count in a page</typeparam>
            <typeparam name="TPageItem">The type of item being returned in the page result.</typeparam>
            <typeparam name="TPageCount">The type of the page count</typeparam>
        </member>
        <member name="P:Roblox.Paging.IPagedResult`3.PageCount">
            <summary>
            Total number of pages available
            </summary>
        </member>
        <member name="T:Roblox.Paging.KeyedPagedResult`2">
            <summary>
            A default implementation of <see cref="T:Roblox.Paging.IKeyedPagedResult`2"/>
            </summary>
        </member>
        <member name="P:Roblox.Paging.KeyedPagedResult`2.PageItems">
            <inheritdoc cref="P:Roblox.Paging.IKeyedPagedResult`2.PageItems"/>
        </member>
        <member name="P:Roblox.Paging.KeyedPagedResult`2.NextPageKey">
            <inheritdoc cref="P:Roblox.Paging.IKeyedPagedResult`2.NextPageKey"/>
        </member>
        <member name="M:Roblox.Paging.KeyedPagedResult`2.#ctor(System.Collections.Generic.IReadOnlyCollection{`0},Roblox.Paging.PageKeyInfo{`1})">
            <summary>
            Instantiates a new <see cref="T:Roblox.Paging.KeyedPagedResult`2"/> .
            </summary>
        </member>
        <member name="M:Roblox.Paging.KeyedPagedResult`2.EmptyLastPage">
            <summary>
            A static factory method to return a KeyedPagedResult representing an empty result with no next page.
            </summary>
        </member>
        <member name="T:Roblox.Paging.CursorBase">
            <summary>
            Base for cursor information models.
            </summary>
        </member>
        <member name="P:Roblox.Paging.CursorBase.Discriminator">
            <summary>
            The cursor discriminator.
            </summary>
            <remarks>
            The cursor discriminator is intended to make sure a cursor can only be
            parsed for the request it was intended to.
            
            The discriminator should contain unique information about the request
            that is also common across all pages for the paged item.
            </remarks>
            <example>
            If paging through a users badges a valid discriminator would be the user id (e.g. "48103520")
                The user id will be the same across all pages of the users badges, but the cursor
                verification will fail if the same cursor is attempted to be used for another user.
            
            - Second example -
            If paging through a users assets by asset type a valid discriminator 
            could be a comination of both the asset type and user id (e.g. "Hat_48103520")
                The user id and asset type will be the same across all pages of the users hat inventory
                but would fail verification if the same cursor was then used on the same users models.
            </example>
        </member>
        <member name="P:Roblox.Paging.CursorBase.Count">
            <summary>
            The number of items to be requested.
            </summary>
        </member>
        <member name="T:Roblox.Paging.ExclusiveStartKeyCursor`1">
            <summary>
            Cursor information for exclusive start key based cursors.
            </summary>
            <typeparam name="T">The key type.</typeparam>
        </member>
        <member name="P:Roblox.Paging.ExclusiveStartKeyCursor`1.Key">
            <summary>
            The exclusive start key value.
            </summary>
        </member>
        <member name="P:Roblox.Paging.ExclusiveStartKeyCursor`1.SortOrder">
            <summary>
            The <see cref="P:Roblox.Paging.ExclusiveStartKeyCursor`1.SortOrder"/>.
            </summary>
        </member>
        <member name="P:Roblox.Paging.ExclusiveStartKeyCursor`1.PagingDirection">
            <summary>
            The direction the cursor is facing.
            </summary>
        </member>
        <member name="T:Roblox.Paging.StartIndexCursor">
            <summary>
            Cursor information for start index based cursors.
            </summary>
        </member>
        <member name="P:Roblox.Paging.StartIndexCursor.StartIndex">
            <summary>
            The start index value.
            </summary>
        </member>
        <member name="T:Roblox.Paging.PageKeyInfo`1">
            <summary>
            A struct wrapping a PageKey for the <see cref="T:Roblox.Paging.IKeyedPagedResult`2"/> with information about whether the key exists.
            </summary>
            <typeparam name="TPageKey"></typeparam>
        </member>
        <member name="P:Roblox.Paging.PageKeyInfo`1.HasPage">
            <summary>
            Informs whether a page (and thus its key) exists.
            </summary>
        </member>
        <member name="P:Roblox.Paging.PageKeyInfo`1.PageKey">
            <summary>
            The key of the page.
            </summary>
        </member>
        <member name="M:Roblox.Paging.PageKeyInfo`1.#ctor(`0)">
            <summary>
            Constructs a PagedKeyInfo for a page with the specified page key.
            </summary>
        </member>
        <member name="M:Roblox.Paging.PageKeyInfo`1.NoPage">
            <summary>
            A static factory method to return a PagedKeyInfo representing the absence of a page
            </summary>
        </member>
    </members>
</doc>
