<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roblox.Passwords.Client</name>
    </assembly>
    <members>
        <member name="T:Roblox.Passwords.Client.PasswordOwnerType">
            <summary>
            Represents the owner of a password.
            
            For User a lookup will be done for AccountPasswordHash.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.PasswordOwnerType.User">
            <summary>
            Represents the ID specified is for a user, will perform a lookup to get account ID.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.PasswordOwnerType.Account">
            <summary>
            Represents the ID specified is for an account.
            </summary>
        </member>
        <member name="T:Roblox.Passwords.Client.PasswordSetStatus">
            <summary>
            Represents the set status.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.PasswordSetStatus.Unknown">
            <summary>
            Unknown status
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.PasswordSetStatus.ValidPasswordSet">
            <summary>
            Valid password is set
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.PasswordSetStatus.InvalidPasswordSet">
            <summary>
            The set password is invalid.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.PasswordSetStatus.PasswordNeedsReset">
            <summary>
            The password needs reset.
            </summary>
        </member>
        <member name="T:Roblox.Passwords.Client.PasswordsClient">
            <summary>
            Implementation for <see cref="T:Roblox.Passwords.Client.IPasswordsClient"/>
            </summary>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.#ctor(Roblox.Instrumentation.ICounterRegistry,System.Func{System.String},Roblox.RequestContext.IRequestContextLoader)">
            <summary>
            Construct a new instance of <see cref="T:Roblox.Passwords.Client.PasswordsClient"/>
            </summary>
            <param name="counterRegistry">The <see cref="T:Roblox.Instrumentation.ICounterRegistry"/></param>
            <param name="apiKeyGetter">The api key getter/</param>
            <param name="requestContextLoader">The <see cref="T:Roblox.RequestContext.IRequestContextLoader"/></param>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.#ctor(Roblox.Http.Client.IHttpClientBuilder,Roblox.Http.ServiceClient.IServiceClientSettings)">
            <summary>
            Construct a new instance of <see cref="T:Roblox.Passwords.Client.PasswordsClient"/>
            </summary>
            <param name="httpClientBuilder">The <see cref="T:Roblox.Http.Client.IHttpClientBuilder"/></param>
            <param name="serviceClientSettings">The <see cref="T:Roblox.Http.ServiceClient.IServiceClientSettings"/></param>
            <exception cref="T:System.ArgumentNullException">
            - <paramref name="httpClientBuilder"/> cannot be null.
            - <paramref name="serviceClientSettings"/> cannot be null.
            </exception>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.SetPassword(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.SetPassword(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.SetPasswordAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.SetPasswordAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.VerifyPassword(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.VerifyPassword(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.VerifyPasswordAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.VerifyPasswordAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.GetPasswordStatus(Roblox.Passwords.Client.PasswordOwnerType,System.Int64)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.GetPasswordStatus(Roblox.Passwords.Client.PasswordOwnerType,System.Int64)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.GetPasswordStatusAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.GetPasswordStatusAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.SetPasswordResetRequired(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Boolean)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.SetPasswordResetRequired(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Boolean)"/>
        </member>
        <member name="M:Roblox.Passwords.Client.PasswordsClient.SetPasswordResetRequiredAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Roblox.Passwords.Client.IPasswordsClient.SetPasswordResetRequiredAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Boolean,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:Roblox.Passwords.Client.IPasswordsClient">
            <summary>
            Default interface for passwords client.
            </summary>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.SetPassword(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String)">
            <summary>
            Set the password for the specified password owner.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="password">The password.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.SetPasswordAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Set the password for the specified password owner.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="password">The password.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.VerifyPassword(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String)">
            <summary>
            Verify the password for the specified password owner.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="password">The password.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.VerifyPasswordAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.String,System.Threading.CancellationToken)">
            <summary>
            Verify the password for the specified password owner.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="password">The password.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.GetPasswordStatus(Roblox.Passwords.Client.PasswordOwnerType,System.Int64)">
            <summary>
            Get the password status for the specified password owner.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.GetPasswordStatusAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Threading.CancellationToken)">
            <summary>
            Verify the password for the specified password owner.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.SetPasswordResetRequired(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Boolean)">
            <summary>
            Set the password needing reset.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="needsReset">Needs reset.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="M:Roblox.Passwords.Client.IPasswordsClient.SetPasswordResetRequiredAsync(Roblox.Passwords.Client.PasswordOwnerType,System.Int64,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Set the password needing reset.
            </summary>
            <param name="passwordOwner">The <see cref="T:Roblox.Passwords.Client.PasswordOwnerType"/></param>
            <param name="passwordOwnerId">The ID of the password owner.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="needsReset">Needs reset.</param>
            <returns>The result of the operation.</returns>
        </member>
        <member name="T:Roblox.Passwords.Client.PasswordStatusResult">
            <summary>
            Result from GetPasswordStatus
            </summary>
        </member>
        <member name="P:Roblox.Passwords.Client.PasswordStatusResult.Id">
            <summary>
            The ID of the AccountPasswordHash
            </summary>
        </member>
        <member name="P:Roblox.Passwords.Client.PasswordStatusResult.SetStatus">
            <summary>
            The password set status.
            </summary>
        </member>
        <member name="T:Roblox.Passwords.Client.SetPasswordResetRequiredResult">
            <summary>
            Result for SetPasswordResetRequired
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.SetPasswordResetRequiredResult.Unknown">
            <summary>
            Unknown error
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.SetPasswordResetRequiredResult.Success">
            <summary>
            Success.
            </summary>
        </member>
        <member name="T:Roblox.Passwords.Client.SetPasswordResult">
            <summary>
            Represents the result for SetPassword
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.SetPasswordResult.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.SetPasswordResult.TargetNotExist">
            <summary>
            The target does not exist.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.SetPasswordResult.PasswordSet">
            <summary>
            The password was set
            </summary>
        </member>
        <member name="T:Roblox.Passwords.Client.VerifyPasswordResult">
            <summary>
            Represents the result for VerifyPassword
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.VerifyPasswordResult.Unknown">
            <summary>
            Unknown/
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.VerifyPasswordResult.TargetNotExist">
            <summary>
            The target does not exist.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.VerifyPasswordResult.PasswordNeedsReset">
            <summary>
            The password needs reset.
            </summary>
        </member>
        <member name="F:Roblox.Passwords.Client.VerifyPasswordResult.ValidPasswordHash">
            <summary>
            The password hash is valid.
            </summary>
        </member>
    </members>
</doc>
