<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Roblox.RestClientBase</name>
    </assembly>
    <members>
        <!-- Badly formed XML comment ignored for member "M:Roblox.RestClientBase.GuardedApiClientBase.SerializeSendData(System.Object)" -->
        <member name="M:Roblox.RestClientBase.GuardedApiClientBase.DeserializeResponseData``1(System.String)">
            <summary>
            Converts the response data into whatever type the calling code desires.
            This base method assumes the responseString is in JSON format and deserialize it.
            </summary>
            <typeparam name="T">The type of object(s) to deserialize the responseString into</typeparam>
            <param name="responseString">The response string to deserialize.</param>
            <returns>The object instances generated by deserializing the response string</returns>
        </member>
        <member name="M:Roblox.RestClientBase.GuardedApiClientBase.BuildUri(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Builds and returns full uri including query string parameters.
            This method will also add the ROBLOX ApiKey if it is set.
            </summary>
            <param name="actionPath">Action name to be executed</param>
            <param name="queryStringParameters">Query string parameter</param>
            <returns>Complete URI with action name and query string parameters.</returns>
        </member>
        <member name="T:Roblox.RestClientBase.GuardedRestClientBase">
            <summary>
            Provides a base REST client that implements a step down failover retry circuit breaker and monitoring.
            </summary>
            <seealso cref="T:Roblox.RestClientBase.MonitoringRestClientBase" />
        </member>
        <member name="T:Roblox.RestClientBase.GuardedRestClientPerformanceMonitor">
            <summary>
            Maintains failed request and circuit breaker trips per-second counters for use by the GuardedRestClientBase. 
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="T:Roblox.RestClientBase.MonitoringRestClientBase">
            <summary>
            A client base which enables monitoring.
            </summary>
            <seealso cref="T:Roblox.RestClientBase.RestClientBase" />
        </member>
        <member name="T:Roblox.RestClientBase.Properties.Settings">
            <summary>
            Configuration that uses Roblox.Configuration.Provider
            </summary>
        </member>
        <member name="P:Roblox.RestClientBase.RestClientBase.Endpoint">
            <summary>
            Property for setting up base service end point.
            </summary>
        </member>
        <member name="P:Roblox.RestClientBase.RestClientBase.Timeout">
            <summary>
            Property for setting up default time out.
            </summary>
        </member>
        <member name="P:Roblox.RestClientBase.RestClientBase.Name">
            <summary>
            Property for setting up client name.
            </summary>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.EncodeAndEscape(System.String)">
            <summary>
            UTF8 encodes and escapes the given string.
            
            This is to ensure that only encodable text (by UTF8) will be parsed. 
            If the text contains unpaired surrogates (i.e. invalid UTF16), 
            it will throw a TextEncoderFallbackException but this solution should handle it.
            </summary>
            <param name="stringToProcess">The string to process.</param>
            <returns>Escaped and UTF8 encoded string.</returns>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.AppendEscapedUriDataString(System.Text.StringBuilder,System.String)">
            <summary>
            Appends the escaped URI data string.
            </summary>
            <param name="sb">The sb.</param>
            <param name="stringToEscape">The string to escape.</param>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.SerializeSendData(System.Object)">
            <summary>
            Converts Body Post data into a string that can be sent in an HTTP request.
            This base method turns the given data into a JSON string.
            Override this if you have some other type of data needs
            </summary>
            <param name="bodyData">The body data to convert.</param>
            <returns></returns>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.DeserializeResponseData``1(System.String)">
            <summary>
            Converts the response data into whatever type the calling code desires.
            This base method assumes the return data is in JSON format and deserialize it.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="responseString">The response string.</param>
            <returns></returns>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.BuildUri(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}})">
            <summary>
            Builds and returns full uri including query string parameters.
            </summary>
            <param name="actionPath">Action name to be executed</param>
            <param name="queryStringParameters">Query string parameter</param>
            <returns>Complete URI with action name and query string parameters.</returns>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.BuildHeaders(Roblox.RestClientBase.RestClientBase.HttpMethod,System.Net.WebClient,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Adds the given header key/value pairs into the WebCleint.
            </summary>
            <param name="method">The method being used (POST/GET/PUT/DELTE). Not used by this base method.</param>
            <param name="webClient">The web client.</param>
            <param name="headers">The headers.</param>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.ExecuteHttpRequest(System.String,Roblox.RestClientBase.RestClientBase.HttpMethod,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding,System.String)">
            <summary>
            Executes the HTTP request.
            </summary>
            <param name="actionPath">The uri.</param>
            <param name="method">The method (POST/GET/PUT/DELETE).</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="bodyString">The body string.</param>
            <param name="headers">The headers.</param>
            <param name="specificEncoding">The <see cref="T:System.Text.Encoding"/> to be used for this request.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns>response string</returns>
            <exception cref="T:Roblox.RestClientBase.ApiClientException">Invalid HttpMethod:  + method</exception>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.ExecuteHttpRequestAsync(System.String,Roblox.RestClientBase.RestClientBase.HttpMethod,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.Text.Encoding,System.String)">
            <summary>
            Executes the HTTP request asynchronous.
            </summary>
            <param name="actionPath">The uri.</param>
            <param name="method">The method (POST/GET/PUT/DELETE).</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="bodyString">The body string.</param>
            <param name="headers">The headers.</param>
            <param name="specificEncoding">The <see cref="T:System.Text.Encoding"/> to be used for this request.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns>response string</returns>
            <exception cref="T:Roblox.RestClientBase.ApiClientException">Invalid HttpMethod:  + method</exception>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.Get(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do an HTTP GET request, throw away the response.
            </summary>
            <param name="actionPath">The uri.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.GetAsync(System.String,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do an async HTTP GET request, throw away the response
            </summary>
            <param name="actionPath">The action path.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.Get``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do a HTTP GET request, return the response in the desired type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actionPath">The action path.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns>the response, deserialized into a <typeparamref name="T"/></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.GetAsync``1(System.String,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do an async HTTP GET request, return the response in the desired type.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="actionPath">The uri.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns>the response, deserialized into a <typeparamref name="T"/></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.Post``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do a HTTP POST request, throw away the response.
            </summary>
            <typeparam name="T">The type of the data to post.</typeparam>
            <param name="actionPath">The uri.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="bodyData">The body data.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.PostAsync``1(System.String,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},``0,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do an async HTTP POST request, throw away the response.
            </summary>
            <typeparam name="T">The type of data to post.</typeparam>
            <param name="actionPath">The uri.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="bodyData">The body data.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.Post``1(System.String,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do a HTTP POST request, return the response in the desired type
            </summary>
            <typeparam name="T">The type of data expected to be returned.</typeparam>
            <typeparam name="TU">The type of data to post.</typeparam>
            <param name="actionPath">The uri.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="bodyData">The body data.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns>the response, deserialized into a <typeparamref name="T"/></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
        <member name="M:Roblox.RestClientBase.RestClientBase.PostAsync``1(System.String,System.Threading.CancellationToken,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.Object}},System.Object,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{System.String,System.String}},System.String)">
            <summary>
            Do an async HTTP POST request, return the response in the desired type
            </summary>
            <typeparam name="T">The type of data expected to be returned.</typeparam>
            <typeparam name="TU">The type of data to post.</typeparam>
            <param name="actionPath">The uri.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <param name="queryStringParameters">The query string parameters.</param>
            <param name="bodyData">The body data.</param>
            <param name="headers">The headers.</param>
            <param name="recordActionPathAs">The perfmon instance name to record requests for this action.</param>
            <returns>the response, deserialized into a <typeparamref name="T"/></returns>
            <remarks>
                USE <paramref name="recordActionPathAs"/> IF YOUR PATH HAS PARAMETERS IN IT! and pass in the template string for the path.
                If you do not, you will create a set of perfmon counters for each path and blow up the memory
            </remarks>
        </member>
    </members>
</doc>
